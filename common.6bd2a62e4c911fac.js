"use strict";(self.webpackChunkapp=self.webpackChunkapp||[]).push([[76],{6821:(F,_,o)=>{o.d(_,{_:()=>a});const a={Warrior:{attack:2,defense:2,hp:10,veteranHp:15,defenseBonus:1.5,wallBonus:4},Rider:{attack:2,defense:1,hp:10,veteranHp:15,defenseBonus:1.5,wallBonus:4},Defender:{attack:1,defense:3,hp:15,veteranHp:20,defenseBonus:1.5,wallBonus:4},Swordsman:{attack:3,defense:3,hp:15,veteranHp:20,defenseBonus:1.5,wallBonus:0},Archer:{attack:2,defense:1,hp:10,veteranHp:15,defenseBonus:1.5,wallBonus:4},Catapult:{attack:4,defense:0,hp:10,veteranHp:15,defenseBonus:0,wallBonus:0},Knight:{attack:3.5,defense:1,hp:10,veteranHp:15,defenseBonus:1.5,wallBonus:4},"Old Knight":{attack:3.5,defense:1,hp:15,veteranHp:20,defenseBonus:1.5,wallBonus:4},Giant:{attack:5,defense:4,hp:40,veteranHp:null,defenseBonus:1.5,wallBonus:0},Amphibian:{attack:2,defense:1,hp:10,veteranHp:15,defenseBonus:1.5,wallBonus:0},Tridention:{attack:2.5,defense:1,hp:10,veteranHp:20,defenseBonus:1.5,wallBonus:0},Crab:{attack:4,defense:4,hp:40,veteranHp:null,defenseBonus:1.5,wallBonus:0},"Battle Sled":{attack:3,defense:2,hp:15,veteranHp:20,defenseBonus:1.5,wallBonus:0},Polytaur:{attack:3,defense:1,hp:15,veteranHp:null,defenseBonus:1.5,wallBonus:4},"Mind Bender":{attack:0,defense:1,hp:10,veteranHp:null,defenseBonus:1.5,wallBonus:0},"Ice Fortress":{attack:4,defense:3,hp:20,veteranHp:25,defenseBonus:1.5,wallBonus:0},"Ice Archer":{attack:.1,defense:1,hp:10,veteranHp:15,defenseBonus:1.5,wallBonus:4},"Dragon Egg":{attack:0,defense:2,hp:10,veteranHp:null,defenseBonus:1.5,wallBonus:4},"Baby Dragon":{attack:3,defense:3,hp:15,veteranHp:null,defenseBonus:1.5,wallBonus:0},"Fire Dragon":{attack:4,defense:3,hp:20,veteranHp:null,defenseBonus:1.5,wallBonus:0},Mooni:{attack:0,defense:2,hp:10,veteranHp:null,defenseBonus:1.5,wallBonus:0},"Nature Bunny":{attack:5,defense:1,hp:20,veteranHp:null,defenseBonus:1.5,wallBonus:0},Gaami:{attack:4,defense:4,hp:30,veteranHp:35,defenseBonus:1.5,wallBonus:0},Shaman:{attack:1,defense:1,hp:10,veteranHp:null,defenseBonus:1.5,wallBonus:0},Hexapod:{attack:3,defense:1,hp:5,veteranHp:10,defenseBonus:1.5,wallBonus:0},Phychi:{attack:1,defense:1,hp:5,veteranHp:10,defenseBonus:1.5,wallBonus:0},Raychi:{attack:3,defense:2,hp:15,veteranHp:20,defenseBonus:1.5,wallBonus:0},Kiton:{attack:1,defense:3,hp:15,veteranHp:20,defenseBonus:1.5,wallBonus:0},"Old Kiton":{attack:1,defense:3,hp:20,veteranHp:25,defenseBonus:1.5,wallBonus:0},Doomux:{attack:4,defense:2,hp:20,veteranHp:25,defenseBonus:1.5,wallBonus:0},Exida:{attack:3,defense:1,hp:10,veteranHp:15,defenseBonus:1.5,wallBonus:0},Centipede:{attack:4,defense:3,hp:20,veteranHp:null,defenseBonus:1.5,wallBonus:0},Segment:{attack:2,defense:2,hp:10,veteranHp:null,defenseBonus:1.5,wallBonus:0},Dinghy:{attack:0,defense:.5,hp:5,veteranHp:null,defenseBonus:1.5,wallBonus:0},Cloak:{attack:0,defense:.5,hp:5,veteranHp:null,defenseBonus:1.5,wallBonus:0},Dagger:{attack:2,defense:2,hp:10,veteranHp:null,defenseBonus:1.5,wallBonus:0},Raft:{attack:0,defense:1,hp:10,veteranHp:null,defenseBonus:1.5,wallBonus:0},Scout:{attack:2,defense:1,hp:10,veteranHp:null,defenseBonus:1.5,wallBonus:0},Rammer:{attack:3,defense:3,hp:10,veteranHp:null,defenseBonus:1.5,wallBonus:0},Bomber:{attack:3,defense:2,hp:10,veteranHp:null,defenseBonus:1.5,wallBonus:0},Juggernaut:{attack:4,defense:4,hp:40,veteranHp:null,defenseBonus:1.5,wallBonus:0},Pirate:{attack:2,defense:2,hp:10,veteranHp:null,defenseBonus:1.5,wallBonus:0},Mermaid:{attack:2,defense:2,hp:10,veteranHp:15,defenseBonus:1.5,wallBonus:4},"Mermaid Archer":{attack:2,defense:1,hp:10,veteranHp:15,defenseBonus:1.5,wallBonus:4},"Mermaid Defender":{attack:1,defense:3,hp:15,veteranHp:20,defenseBonus:1.5,wallBonus:4},Swordsmaid:{attack:3,defense:3,hp:15,veteranHp:20,defenseBonus:1.5,wallBonus:0},Scuba:{attack:0,defense:.5,hp:5,veteranHp:null,defenseBonus:1.5,wallBonus:0},Siren:{attack:0,defense:1,hp:10,veteranHp:null,defenseBonus:1.5,wallBonus:0},Shark:{attack:3,defense:2,hp:10,veteranHp:null,defenseBonus:1.5,wallBonus:0},Jelly:{attack:2,defense:2,hp:20,veteranHp:null,defenseBonus:1.5,wallBonus:0},Puffer:{attack:4,defense:0,hp:10,veteranHp:15,defenseBonus:1.5,wallBonus:0}}},2586:(F,_,o)=>{o.d(_,{H:()=>S});var a=o(6821),C=o(840);function S(u){if(!u.id)return null;let c;if(C.jk.includes(u.id)){if(!u.carriedUnit)return null;c=a._[u.carriedUnit]}else c=a._[u.id];return u.isVeteran&&c.veteranHp?c.veteranHp:c.hp}},5526:(F,_,o)=>{o.d(_,{U:()=>R});var a=o(840),C=o(2586);const S=.5,u=.8;function R(s,n,H){var B;const l=[],h=[];let t=0,p=!1;s.forEach(e=>{const f=n.findIndex(r=>r.hp>0&&!r.isConverted);if("number"!=typeof f||f<0)return h.push(e),void l.push({attacker:{...e,newHp:e.hp,origHp:e.hp},defenders:null});const i=n[f];a.m0.includes(e.id)&&(i.isFrozen=!0),a.LC.includes(e.id)&&(i.isConverted=!0);const g=A(e,{...i});t=f,i.hp=g.defenders[0].newHp,H&&a.XN.includes(e.id)&&(p=!0,n.forEach((r,O)=>{if(r.hp<=0||O===f||r.freeFromSplash||r.isConverted)return;const E=A({...e},{...r},!0);g.attacker.attackDamage+=E.attacker.attackDamage,r.hp=E.defenders[0].newHp,g.defenders.push({...E.defenders[0]})})),l.push(g)});let d=(null===(B=n[t])||void 0===B?void 0:B.newHp)||0;n.slice(t+1).filter(e=>!e.isConverted).forEach(e=>{d+=e.newHp||0});let w=0,v=[];n.filter(e=>e.isConverted).forEach(e=>{w+=e.newHp||0,v.push(e)});let k=n.slice(t+1);p&&(k=k.filter(e=>e.freeFromSplash)),k.forEach(e=>{l.push({defenders:[{...e,newHp:e.hp,origHp:e.hp}],attacker:null})});const x=s.filter(e=>(null==e?void 0:e.newHp)>0).concat(...v);let M=w,m=0;s.forEach(e=>{M+=e.newHp||0,m+=e.attackDamage||0});const D=n.filter(e=>e.newHp<=0||e.isConverted);return{battleResults:l,unusedAttackerUnits:h,totalDefendersHp:d,totalConvertedHp:w,convertedUnits:v,attackerSurvivors:x,totalAttackersHp:M,totalAttackDamage:m,defendersKilled:D}}function A(s,n,H=!1){const{attackDamage:B,splashDamage:l,defenseDamage:h,defenderNewHp:t,attackerNewHp:p,splashedNewHp:d}=function c(s,n){const H=(0,C.H)(s),B=(0,C.H)(n);let l=s.attack;s.isBoosted&&(l+=S);let h=n.defense,t=1;n.isPoisoned?t=u:n.withDefenseBonus&&!n.isPoisoned&&(t="withWall"===n.withDefenseBonus?n.wallBonus:n.defenseBonus);const p=l*(s.hp/H).toFixed(8),d=h*t*(n.hp/B).toFixed(8),w=p+d,k=(p/w).toFixed(16)*l*4.5,x=(d/w).toFixed(16)*h*4.5;let M=Math.round(k),m=Math.round(x);const D=Math.max(n.hp-M,0);let e=null;const f=Math.round(k);a.XN.includes(s.id)&&(e=Math.max(n.hp-Math.floor(f/2),0));let i=s.hp;const g=s.freeFromRetaliation||a.pg.includes(n.id)||a.m0.includes(s.id)||a.bX.includes(s.id)||a.LC.includes(s.id)||a.S9.includes(s.id)||n.isFrozen||n.isConverted;return D>0&&!g?i=Math.max(s.hp-m,0):m=0,{attackDamage:M,defenseDamage:m,splashDamage:f,defenderNewHp:D,attackerNewHp:i,splashedNewHp:e}}(s,n);return s.origHp=s.hp,s.newHp=p,s.attackDamage=Math.min(H?l:B,n.hp-t),n.origHp=n.hp,n.newHp=H?d:t,n.splashedNewHp=d,n.defenseDamage=Math.min(h,s.hp-p),{attacker:s,defenders:[n]}}}}]);